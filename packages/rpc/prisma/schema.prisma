// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ESuggestionType {
  SUGGESTION
  REPORT
}

enum EActivityAction {
  CHANGE_PASSWORD
  LOG_IN
  SIGN_UP
}

model NotificationSetting {
  userId    String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemSold           Boolean @default(true)
  bidActivity        Boolean @default(true)
  priceChange        Boolean @default(false)
  auctionExpiration  Boolean @default(false)
  outBid             Boolean @default(false)
  ownedItemUpdates   Boolean @default(false)
  successfulPurchase Boolean @default(false)
  fleamintNewsletter Boolean @default(false)
  mentions           Boolean @default(false)
  replies            Boolean @default(false)
  messages           Boolean @default(false)
  suggestedItems     Boolean @default(false)

  @@map("notification-settings")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country             String?
  state               String?
  streetAddress       String?
  secondStreetAddress String?
  apartmentNumber     String?
  postCode            String?
  contactNumber       String?

  isDefault Boolean @default(false)

  @@map("addresses")
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  browser   String
  ipAddress String
  location  String
  action    EActivityAction

  @@map("activities")
}

model SecurityQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    String
  userAnswers UserAnswer[]

  @@map("security-questions")
}

model UserAnswer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  questionId String
  question   SecurityQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  memorableAnswer String

  @@unique([userId, questionId])
  @@map("user-answers")
}

model Suggestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  type   ESuggestionType
  detail String

  @@map("suggestions")
}

model Achievement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalVolume    Int
  projects       Int
  globalPartners Int
  totalUser      Int

  @@map("achievements")
}

model Subscriber {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  @@map("subscribers")
}

model KYCInfo {
  userId           String   @id @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  personaInquiryId String   @unique

  completedAt          DateTime
  firstName            String?
  lastName             String?
  birthDate            DateTime?
  addressStreet1       String?
  addressStreet2       String?
  addressCity          String?
  addressPostalCode    String?
  identificationNumber String?
  phoneNumber          String?

  @@map("kyc-information")
}
